pipeline {
    agent any
   
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Choose action to apply or destroy')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID_1')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY_1')
        AWS_DEFAULT_REGION = "us-east-1"
    }

    stages {
    
        stage('terraform init') {
            steps {
                script {
                    retry(3) {
                        sh "terraform init"
                    }
                }
            }
        }
  
        stage('plan') {
            steps {
                script {
                    retry(3) {
                        sh "terraform plan"
                    }
                }
            }
        }

        stage('Action') {
            steps {
                script {
                    retry(3) {
                        sh "terraform ${params.ACTION} --auto-approve"
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                echo 'Terraform encountered an error. Attempting to remove state lock...'
                try {
                    sh '''
                    LOCK_ID=$(aws dynamodb scan --table-name terraform-state --filter-expression "LockID = :lockid" --expression-attribute-values '{":lockid":{"S":"terraform.tfstate"}}' --query "Items[0].LockID.S" --output text)
                    if [ "$LOCK_ID" != "None" ]; then
                        echo "Found lock ID: $LOCK_ID"
                        aws dynamodb delete-item --table-name terraform-state --key '{"LockID": {"S": "'$LOCK_ID'"}}'
                        echo "State lock removed."
                    else
                        echo "No state lock found."
                    fi
                    '''
                } catch (Exception e) {
                    echo 'Failed to remove state lock. Manual intervention may be required.'
                }
            }
        }
    }
}
